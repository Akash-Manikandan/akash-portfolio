// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "metrics"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model PersonalInfo {
  id             String             @id @default(cuid())
  goals          String[]
  developer      Developer?
  languageStatus Language[]
  about          String             @default("")
  resume         String             @default("")
  me             Boolean            @default(false)
  education      Education[]
  professional   ProfessionalWork[]
}

model Education {
  id             String       @id @default(cuid())
  name           String       @unique
  degree         String
  field          String
  duration       String
  location       String
  description    String
  marks          String
  images         String[]
  PersonalInfo   PersonalInfo @relation(fields: [personalInfoId], references: [id])
  personalInfoId String
}

model ProfessionalWork {
  id             String       @id @default(cuid())
  companyName    String
  position       Position[]
  location       String
  description    String
  images         String[]
  PersonalInfo   PersonalInfo @relation(fields: [personalInfoId], references: [id])
  personalInfoId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  duration       String       @default("")
}

model Position {
  id                 String           @id @default(cuid())
  name               String
  description        String
  skills             String[]
  duration           String
  order              Int
  ProfessionalWork   ProfessionalWork @relation(fields: [professionalWorkId], references: [id])
  professionalWorkId String
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  techStack          TechStack[]
}

model Language {
  id             String       @id @default(cuid())
  name           String       @unique
  percent        Int
  lang           String
  images         String[]
  category       String
  PersonalInfo   PersonalInfo @relation(fields: [personalInfoId], references: [id])
  personalInfoId String
}

model Works {
  id           String      @id @default(cuid())
  name         String      @unique
  deployment   String      @unique
  github       String      @unique
  description  String[]
  contribution String[]
  tagLine      String      @default("")
  media        Media[]
  developers   Developer[]
  timeLine     String?
  role         String      @default("Developer")
  company      String      @default("Personal")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  order        Int         @default(0)
  techStack    TechStack[]
}

model Developer {
  id             String        @id @default(cuid())
  name           String        @unique
  email          String        @unique
  linkedIn       String        @unique
  github         String        @unique
  twitter        String        @unique
  otherContacts  String[]
  images         String[]
  about          String
  specifics      String[]
  Works          Works[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  PersonalInfo   PersonalInfo? @relation(fields: [personalInfoId], references: [id])
  personalInfoId String?       @unique
}

model Visitor {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ip        String   @unique
  location  Json?
  visits    BigInt
  refresh   BigInt
}

model Media {
  id          Int      @id @default(autoincrement())
  description String?
  url         String   @unique
  isThumbnail Boolean  @default(false)
  isImage     Boolean  @default(true)
  Works       Works    @relation(fields: [worksId], references: [id])
  worksId     String
  createdAt   DateTime @default(now())
}

model TechStack {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  works       Works[]
  Position    Position[]
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  username  String
  email     String
  message   String
}
